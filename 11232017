1) PROBLEM: GEMSTONES

SOLUTION: 

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

/**
 * 
 * @author Arthur Salla (asalla)
 *
 */

public class Solution {

    static int gemstones(String[] arr) {
        
        ArrayList<Integer> list = new ArrayList<Integer>();
        int meter = 0;

        for(int j = 97; j <=122; j++) {
            int counter = 0;
            char c = (char) j;
            
            for(int i = 0; i < arr.length; i++) {
                if(arr[i].indexOf(c) != -1) {
                    counter++;
                }
            }
            list.add(counter);
        }
        
        for (Integer i : list) {
            if(i == arr.length) {
               meter++;                
            }
        }
            
              return meter;  
    }
 
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        String[] arr = new String[n];
        for(int arr_i = 0; arr_i < n; arr_i++){
            arr[arr_i] = in.next();
        }
        int result = gemstones(arr);
        System.out.println(result);
    }
}


----------------------------------------------------------------------------------------------------------------------------------

2) PROBLEM : PAIRS (https://www.hackerrank.com/challenges/pairs/problem)

SOLUTION:

import java.io.*;
import java.util.*;

/**
 * 
 * @author Arthur Salla (asalla)
 *
 */

public class Solution {
    
    public static int findPairs(int[] arr, int k) {
        int result = 0;
        
        for(int i = 0; i < arr.length; i++) {
            for(int j = 0; j < arr.length; j++) {
                if(i == j) {
                    continue;
                }
                if((arr[i] - arr[j]) == k) {
                    result++;
                }
            }
        }
        return result;
    }

    public static void main(String[] args) {
        
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int k = scan.nextInt();
        scan.nextLine();
        int[] arr = new int[n];
        for(int i = 0; i < n; i++) {
           arr[i] = scan.nextInt();
        }
        int result = findPairs(arr, k);
        System.out.println(result);

    }
}

------------------------------------------------------------------------------------------------------------------------------------

3) PROBLEM : BIG SORTING (https://www.hackerrank.com/challenges/big-sorting/problem)

SOLUTION:

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

/**
 * 
 * @author Arthur Salla (asalla)
 *
 */

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        String[] unsorted = new String[n];
        for(int unsorted_i=0; unsorted_i < n; unsorted_i++){
            unsorted[unsorted_i] = in.next();
        }
        
        // can't accomodate the real BIG number in a long
        //long[] longArray = new long[n];
        
        // Use Big Integer
        BigInteger[] bigNumberArray = new BigInteger[n];
        
        for(int i = 0; i < n; i++) {
            bigNumberArray[i] = new BigInteger(unsorted[i]);
        }
        
        Arrays.sort(bigNumberArray);
        
        for(int k = 0; k < n; k++) {
            System.out.println(bigNumberArray[k]);
        }
    }
}


------------------------------------------------------------------------------------------------------------------------------------

4) PROBLEM: CLOSEST NUMBERS (https://www.hackerrank.com/challenges/closest-numbers/problem)

SOLUTION:

import java.io.*;
import java.util.*;

/**
 * 
 * @author Arthur Salla (asalla)
 *
 */

public class Solution {
    
    public static void findClosestNumbers(int[] arr) {
        
        Map<String, Integer> map = new HashMap();
        
        for(int i = 0; i < arr.length; i++) {
            for(int j = 0; j < arr.length; j++) {
                if(i == j) {
                    continue;
                }
                // Making sure that that same pairs are not inserted more than once
                if(!map.containsKey(arr[j] + " " + arr[i])) {
                    map.put(arr[i] + " " + arr[j], Math.abs(arr[i] - arr[j]));    
                }
            }
        }
        
        int leastDiff = Collections.min(map.values());
        StringBuilder sb = new StringBuilder();
        
/*      TODO - figure out how to display in certain cases
        for(Map.Entry<String, Integer> entry : map.entrySet()) {
            if(entry.getValue() == leastDiff) {
            sb.append(entry.getKey());
            }
             //System.out.println(entry.getKey() + " | " + entry.getValue());            
        }
        


        String output = sb.toString().replaceAll("\\s+","").trim();
        String[] strArray = output.split("");
        int[] intArray = new int[strArray.length];
        
        for(int k = 0; k < intArray.length; k++) {
            intArray[k] = Integer.parseInt(strArray[k]);
        }
        
        Arrays.sort(intArray);
        
        for(int k = 0; k < intArray.length; k++) {
            System.out.println(intArray[k]);
        }
*/

        for(Map.Entry<String, Integer> entry : map.entrySet()) {
            if(entry.getValue() == leastDiff) {
            System.out.print(entry.getKey());
                
            }            
        }
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        scan.nextLine();
        int[] arr = new int[n];
        
        for(int i = 0; i < n; i++) {
            arr[i] = scan.nextInt();
        }
        
       findClosestNumbers(arr);
        
    }
}


-------------------------------------------------------------------------------------------------------------------------------------


5) PROBLEM: INTRO TO TUTORIAL (https://www.hackerrank.com/challenges/tutorial-intro/problem)

SOLUTION:

import java.io.*;
import java.util.*;

/**
 * 
 * @author Arthur Salla (asalla)
 *
 */

public class Solution {
    
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int k = scan.nextInt();
        scan.nextLine();
        int n = scan.nextInt();        
        int[] arr = new int[n];
        
        for(int i = 0; i < n; i++) {
            arr[i] = scan.nextInt();
        }
        
        for(int i = 0; i < n; i++) {
            if(arr[i] == k) {
                System.out.print(i);
                break;
            }
        }
    }
}

----------------------------------------------------------------------------------------------------------------------------------

6) PROBLEM: Sum vs XOR (https://www.hackerrank.com/challenges/sum-vs-xor/problem)

SOLUTION:

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

/**
 * 
 * @author Arthur Salla (asalla)
 *
 */

public class Solution {


    static long solve(long n) {
        long counter = 0;
        
        for(long i = 0; i <= n; i++) {
            if((n + i) == (n^i)) {
                counter++;
            }
        }
        return counter;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        long n = in.nextLong();
        long result = solve(n);
        System.out.println(result);
    }
}


---------------------------------------------------------------------------------------------------------------------------------------



