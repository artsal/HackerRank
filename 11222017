1) PROBLEM : SUPER REDUCED STRING

SOLUTION:

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static String super_reduced_string(String s) {

		StringBuilder sb = new StringBuilder(s);
		boolean reduceIt = true;

		while (reduceIt) {

			reduceIt = false;

			for (int i = 0; i < sb.length() - 1; ++i) {
				if (sb.charAt(i) == sb.charAt(i + 1)) {
					sb = sb.delete(i, i + 2);
					reduceIt = true;
				}
			}
		}

		if (sb.length() == 0) {
			return "Empty String";
		}

		return sb.toString();
	}

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		String s = in.next();
		String result = super_reduced_string(s);
		System.out.println(result);
	}
}

------------------------------------------------------------------------------------------------------------------------

2) PROBLEM : CAMEL CASE

SOLUTION:

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
import java.util.ArrayList;

public class Solution {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String s = in.next();
        
        char[] charArray = s.toCharArray();
        boolean startsFromFirstChar = false;
        int counter = 0;
        
        for(int i = 0; i < charArray.length; i++) {
            if(Character.isUpperCase(charArray[i])) {
                counter += 1;
            }
        }        
        System.out.println(counter + 1);
    }
}


------------------------------------------------------------------------------------------------------------------------

3) PROBLEM : CAESAR CIPHER

SOLUTION:

import java.io.*;
import java.util.*;

/**
 * 
 * @author Arthur Salla (asalla)
 *
 */

public class Solution {
    
    	public static String cipherThis(int n, String s, int k) {
		String result = null;

		char[] charArray = s.toCharArray();

		for (int i = 0; i < charArray.length; i++) {

			if (Character.isAlphabetic(charArray[i])) {
				int v = (int) charArray[i];
				charArray[i] = (char) (v + k);
				if (!Character.isAlphabetic(charArray[i])) {
					charArray[i] = (char) (v + k - 26);
				} else {
					charArray[i] = (char) (v + k);
				}
			}

		}

		result = new String(charArray);

		return result;

	}

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int n = scanner.nextInt();
		String s = scanner.next();
		int k = scanner.nextInt();
		String result = cipherThis(n, s, k);
		System.out.println(result);
		scanner.close();
	}
}

------------------------------------------------------------------------------------------------------------------------

3) PROBLEM : PANGRAMS

SOLUTION:

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

/**
 * 
 * @author Arthur Salla
 *
 */

public class Solution {
    
    public static String pangramCheck(String str) {
		str = str.toUpperCase();
		StringBuilder sb = new StringBuilder(str);
		boolean isPangram = true;

		for (int index = 0; index < sb.length(); index++) {
			if (sb.charAt(index) == ' ') {
				sb.deleteCharAt(index);
			}
		}

		str = sb.toString();
		char[] charArray = str.toCharArray();
		Arrays.sort(charArray);

		for (int i = 65; i <= 90; i++) {
			if (Arrays.binarySearch(charArray, (char) i) < 0) {
				isPangram = false;
				break;
			}
		}
		
        return isPangram ? "pangram" : "not pangram";
	}
   
    public static void main(String args[] ) throws Exception {
        Scanner scanner = new Scanner(System.in);
        String str = scanner.nextLine();
        String output = pangramCheck(str);
        System.out.println(output);
        
    }
}

------------------------------------------------------------------------------------------------------------------------


3) PROBLEM : FUNNY STRING

SOLUTION:

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

/**
 * 
 * @author Arthur Salla
 *
 */

public class Solution {

    static String funnyString(String s){
        StringBuilder sb = new StringBuilder(s);
		String r = sb.reverse().toString();
		String result = "Funny";

		char[] sArray = s.toCharArray();
		char[] rArray = r.toCharArray();

		for (int i = 0; i < sArray.length - 1; i++) {
			if (Math.abs((sArray[i + 1] - sArray[i])) != Math.abs((rArray[i + 1] - rArray[i]))) {
				result = "Not Funny";
				break;
			}
		}

		return result;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int q = in.nextInt();
        for(int a0 = 0; a0 < q; a0++){
            String s = in.next();
            String result = funnyString(s);
            System.out.println(result);
        }
    }
}

-----------------------------------------------------------------------------------------------------------------------------




