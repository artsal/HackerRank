1) PROBLEM : LONELY INTEGER (https://www.hackerrank.com/challenges/lonely-integer/problem)

SOLUTION:

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

/**
 * 
 * @author Arthur Salla (asalla)
 *
 */

public class Solution {

    static int lonelyinteger(int[] a) {
        
        ArrayList<Integer> list = new ArrayList<Integer>();
        int result = 0;
        
        for(int i : a) {
            list.add(i);
        }
        
        for(Integer item : list) {
            if(list.indexOf(item) == list.lastIndexOf(item)) {
                result = item;
                break;
            }
        }

        return result;
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] a = new int[n];
        for(int a_i = 0; a_i < n; a_i++){
            a[a_i] = in.nextInt();
        }
        int result = lonelyinteger(a);
        System.out.println(result);
    }
}

----------------------------------------------------------------------------------------------------------------------------------

2) PROBLEM: Recursive Digit Sum (https://www.hackerrank.com/challenges/recursive-digit-sum/problem)

SOLUTION:

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

/**
 * 
 * @author Arthur Salla (asalla)
 *
 */

public class Solution {

    static int superDigit(String n, int k) {
        
        StringBuilder sb = new StringBuilder();
        int result = 0;
        
        for(int i = 0; i < k; i++) {
            sb.append(n);
        }
        
        String str = sb.toString();
        str = str.replaceAll("-", "");
        //System.out.println(str);
        
        if(str.length() == 1) {
            result = Integer.parseInt(str);
        } else {
            int[] intArray = turnStrToIntArr(str);
            result = computeSuperDigit(intArray);
        }
        
        return result;
    }
    
    public static int[] turnStrToIntArr(String str) {
        char[] charArray = str.toCharArray();
        int[] intArray = new int[charArray.length];
            
        for(int i = 0; i < charArray.length; i++) {
            intArray[i] = charArray[i] - '0';
        }
        
        return intArray;
    }

    
    public static int computeSuperDigit(int[] intArray) {
        
        int sum = 0;
        
        for(int i = 0; i < intArray.length; i++) {
            sum += intArray[i];
        }
        
        //System.out.println("sum = " + sum);   
        
        int[] newIntArray = turnStrToIntArr(Integer.toString(sum));        
        //System.out.println("intarray = " + Arrays.toString(newIntArray));
        
        if(newIntArray.length > 1) {
          sum = computeSuperDigit(newIntArray);
        }
        
        return sum;
    }
    

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        String n = in.next();
        int k = in.nextInt();
        int result = superDigit(n, k);
        System.out.println(result);
        in.close();
    }
}

----------------------------------------------------------------------------------------------------------------------------------

